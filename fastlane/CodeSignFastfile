
desc 'Performs the signing processes'
private_lane :manual_code_sign_app do

  puts "Codesigning in #{options[:scheme_name]} ✍️"

  scheme_name = options[:scheme_name]
  bundle_identifier = options[:bundle_identifier]
  xcodeproj_path = options[:xcodeproj_path]
  provisioning_filename = options[:provisioning_filename]

  update_project_team(
    path: xcodeproj_path,
    teamid: options[:team_id],
    targets: [scheme_name]
  )

  update_app_identifier(
    xcodeproj: xcodeproj_path,
    plist_path: "#{options[:plist_path]}#{scheme_name}-Info.plist",
    app_identifier: bundle_identifier
  )

  disable_automatic_code_signing(
    path: xcodeproj_path,
    targets: [scheme_name],
    bundle_identifier: bundle_identifier
  )

  provisioning_filename_extension = ".mobileprovision"
  provisioning_profile_path = ENV['PROVISIONING_PROFILES_PATH']+"/#{provisioning_filename}#{provisioning_filename_extension}"

  if File.exist? provisioning_profile_path

    puts "Provisioning profile #{provisioning_filename} found. Going to install and sign the package with it."

    sh "chmod 755 " + ENV['PROVISIONING_PROFILES_INSTALL_SCRIPT_PATH']
    sh "sh " + ENV['PROVISIONING_PROFILES_INSTALL_SCRIPT_PATH'] + " #{provisioning_profile_path}"

    ENV['SIGH_PROFILE_PATH'] = ENV['TO_INSTALL_PROVISIONING_PROFILES_PATH']+"/#{provisioning_filename}#{provisioning_filename_extension}"

    # sets the project provisoning profile UUID to the mobile provisioning profile obtained from sigh

    update_project_provisioning(
        xcodeproj: xcodeproj_path,
        target_filter: ".*#{scheme_name}.*",
        build_configuration: options[:build_configuration],
        profile: ENV['SIGH_PROFILE_PATH']
    )

  elsif

    puts "No provisioning profiles found at path #{provisioning_profile_path}. Going to search over your developer portal."

    sigh(
      adhoc: export_method=='ad-hoc',
      readonly: ENV['RECREATE_PROVISIONING_PROFILE'] == 'false',
      cert_id: ENV['CERTIFICATE_ID'],
      skip_certificate_verification: true,
      provisioning_name: options[:provisioning_profile_name],
      filename: "#{provisioning_filename}#{provisioning_filename_extension}",
      output_path: ENV['PROVISIONING_PROFILES_PATH'],
      app_identifier: bundle_identifier
    )

  end

end

desc 'Creates and unlock a temporary keychain'
private_lane :create_temp_keychain do |options|

  create_keychain(
    name: options[:name],
    password: options[:password],
    default_keychain: false,
    timeout: false
  )

  unlock_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.
    path: options[:name],
    password: options[:password]
  )

end

desc "Import the certificates within our machine"
private_lane :import_certificates do |options|

  import_certificate(
    certificate_path: ENV['CERTIFICATES_PATH']+"/"+ENV['CERTIFICATE_FILENAME'],
    certificate_password: ENV['CERTIFICATE_KEY_PASSWORD'],
    keychain_name: options[:keychain_name],
    keychain_password: options[:keychain_password],
    log_output: true
  )

  if ENV['CERTIFICATE_FILENAME_PUSH'].to_s.empty? == false &&
     ENV['CERTIFICATE_KEY_PASSWORD_PUSH'].to_s.empty? == false

      import_certificate(
        certificate_path: ENV['CERTIFICATES_PATH']+"/"+ENV['CERTIFICATE_FILENAME_PUSH'],
        certificate_password: ENV['CERTIFICATE_KEY_PASSWORD_PUSH'],
        keychain_name: options[:keychain_name],
        keychain_password: options[:keychain_password],
        log_output: true
      )

  end

end
